MAP
 
================================================================================
 Parallel Accelerator Optimizing:  Function tensor_map.<locals>._map, 
/Users/georgievaga/Documents/Git/MLE/mle-module-3-gabidb/minitorch/fast_ops.py 
(153)  
================================================================================


Parallel loop listing for  Function tensor_map.<locals>._map, /Users/georgievaga/Documents/Git/MLE/mle-module-3-gabidb/minitorch/fast_ops.py (153) 
-------------------------------------------------------------------------------------------|loop #ID
    def _map(                                                                              | 
        out: Storage,                                                                      | 
        out_shape: Shape,                                                                  | 
        out_strides: Strides,                                                              | 
        in_storage: Storage,                                                               | 
        in_shape: Shape,                                                                   | 
        in_strides: Strides,                                                               | 
    ) -> None:                                                                             | 
        # TODO: Implement for Task 3.1.                                                    | 
        if list(out_shape) == list(in_shape) and list(out_strides) == list(in_strides):    | 
            for i in prange(len(out)):-----------------------------------------------------| #0
                out[i] = fn(in_storage[i])                                                 | 
        else:                                                                              | 
            for i in prange(len(out)):-----------------------------------------------------| #1
                out_index: Index = np.empty(MAX_DIMS, np.int16)                            | 
                in_index: Index = np.empty(MAX_DIMS, np.int16)                             | 
                to_index(i, out_shape, out_index)                                          | 
                broadcast_index(out_index, out_shape, in_shape, in_index)                  | 
                o = index_to_position(out_index, out_strides)                              | 
                j = index_to_position(in_index, in_strides)                                | 
                out[o] = fn(in_storage[j])                                                 | 
--------------------------------- Fusing loops ---------------------------------
Attempting fusion of parallel loops (combines loops with similar properties)...
Following the attempted fusion of parallel for-loops there are 2 parallel for-
loop(s) (originating from loops labelled: #0, #1).
--------------------------------------------------------------------------------
----------------------------- Before Optimisation ------------------------------
--------------------------------------------------------------------------------
------------------------------ After Optimisation ------------------------------
Parallel structure is already optimal.
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
 
---------------------------Loop invariant code motion---------------------------
Allocation hoisting:
The memory allocation derived from the instruction at 
/Users/georgievaga/Documents/Git/MLE/mle-module-3-gabidb/minitorch/fast_ops.py 
(167) is hoisted out of the parallel loop labelled #1 (it will be performed 
before the loop is executed and reused inside the loop):
   Allocation:: out_index: Index = np.empty(MAX_DIMS, np.int16)
    - numpy.empty() is used for the allocation.
The memory allocation derived from the instruction at 
/Users/georgievaga/Documents/Git/MLE/mle-module-3-gabidb/minitorch/fast_ops.py 
(168) is hoisted out of the parallel loop labelled #1 (it will be performed 
before the loop is executed and reused inside the loop):
   Allocation:: in_index: Index = np.empty(MAX_DIMS, np.int16)
    - numpy.empty() is used for the allocation.
None
ZIP
 
================================================================================
 Parallel Accelerator Optimizing:  Function tensor_zip.<locals>._zip, 
/Users/georgievaga/Documents/Git/MLE/mle-module-3-gabidb/minitorch/fast_ops.py 
(200)  
================================================================================


Parallel loop listing for  Function tensor_zip.<locals>._zip, /Users/georgievaga/Documents/Git/MLE/mle-module-3-gabidb/minitorch/fast_ops.py (200) 
-----------------------------------------------------------------------------------------------------------------------------|loop #ID
    def _zip(                                                                                                                | 
        out: Storage,                                                                                                        | 
        out_shape: Shape,                                                                                                    | 
        out_strides: Strides,                                                                                                | 
        a_storage: Storage,                                                                                                  | 
        a_shape: Shape,                                                                                                      | 
        a_strides: Strides,                                                                                                  | 
        b_storage: Storage,                                                                                                  | 
        b_shape: Shape,                                                                                                      | 
        b_strides: Strides,                                                                                                  | 
    ) -> None:                                                                                                               | 
        # TODO: Implement for Task 3.1.                                                                                      | 
                                                                                                                             | 
        if list(out_shape) == list(a_shape) == list(b_shape) and list(a_strides) == list(b_strides) == list(out_strides):    | 
            for i in prange(len(out)):---------------------------------------------------------------------------------------| #2
                out[i] = fn(a_storage[i], b_storage[i])                                                                      | 
        else:                                                                                                                | 
            for i in prange(len(out)):---------------------------------------------------------------------------------------| #3
                out_index: Index = np.empty(MAX_DIMS, np.int32)                                                              | 
                a_index: Index = np.empty(MAX_DIMS, np.int32)                                                                | 
                b_index: Index = np.empty(MAX_DIMS, np.int32)                                                                | 
                to_index(i, out_shape, out_index)                                                                            | 
                o = index_to_position(out_index, out_strides)                                                                | 
                broadcast_index(out_index, out_shape, a_shape, a_index)                                                      | 
                j = index_to_position(a_index, a_strides)                                                                    | 
                broadcast_index(out_index, out_shape, b_shape, b_index)                                                      | 
                k = index_to_position(b_index, b_strides)                                                                    | 
                out[o] = fn(a_storage[j], b_storage[k])                                                                      | 
--------------------------------- Fusing loops ---------------------------------
Attempting fusion of parallel loops (combines loops with similar properties)...
Following the attempted fusion of parallel for-loops there are 2 parallel for-
loop(s) (originating from loops labelled: #2, #3).
--------------------------------------------------------------------------------
----------------------------- Before Optimisation ------------------------------
--------------------------------------------------------------------------------
------------------------------ After Optimisation ------------------------------
Parallel structure is already optimal.
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
 
---------------------------Loop invariant code motion---------------------------
Allocation hoisting:
The memory allocation derived from the instruction at 
/Users/georgievaga/Documents/Git/MLE/mle-module-3-gabidb/minitorch/fast_ops.py 
(218) is hoisted out of the parallel loop labelled #3 (it will be performed 
before the loop is executed and reused inside the loop):
   Allocation:: out_index: Index = np.empty(MAX_DIMS, np.int32)
    - numpy.empty() is used for the allocation.
The memory allocation derived from the instruction at 
/Users/georgievaga/Documents/Git/MLE/mle-module-3-gabidb/minitorch/fast_ops.py 
(219) is hoisted out of the parallel loop labelled #3 (it will be performed 
before the loop is executed and reused inside the loop):
   Allocation:: a_index: Index = np.empty(MAX_DIMS, np.int32)
    - numpy.empty() is used for the allocation.
The memory allocation derived from the instruction at 
/Users/georgievaga/Documents/Git/MLE/mle-module-3-gabidb/minitorch/fast_ops.py 
(220) is hoisted out of the parallel loop labelled #3 (it will be performed 
before the loop is executed and reused inside the loop):
   Allocation:: b_index: Index = np.empty(MAX_DIMS, np.int32)
    - numpy.empty() is used for the allocation.
None
REDUCE
 
================================================================================
 Parallel Accelerator Optimizing:  Function tensor_reduce.<locals>._reduce, 
/Users/georgievaga/Documents/Git/MLE/mle-module-3-gabidb/minitorch/fast_ops.py 
(251)  
================================================================================


Parallel loop listing for  Function tensor_reduce.<locals>._reduce, /Users/georgievaga/Documents/Git/MLE/mle-module-3-gabidb/minitorch/fast_ops.py (251) 
---------------------------------------------------------------|loop #ID
    def _reduce(                                               | 
        out: Storage,                                          | 
        out_shape: Shape,                                      | 
        out_strides: Strides,                                  | 
        a_storage: Storage,                                    | 
        a_shape: Shape,                                        | 
        a_strides: Strides,                                    | 
        reduce_dim: int,                                       | 
    ) -> None:                                                 | 
        # TODO: Implement for Task 3.1.                        | 
        reduce_size = a_shape[reduce_dim]                      | 
        reduce_strides = a_strides[reduce_dim]                 | 
                                                               | 
        for i in prange(len(out)):-----------------------------| #4
            out_index: Index = np.empty(MAX_DIMS, np.int32)    | 
            to_index(i, out_shape, out_index)                  | 
                                                               | 
            o = index_to_position(out_index, out_strides)      | 
            j = index_to_position(out_index, a_strides)        | 
            temp = out[o]                                      | 
            for s in range(reduce_size):                       | 
                temp = fn(temp, a_storage[j])                  | 
                j += reduce_strides                            | 
            out[o] = temp                                      | 
--------------------------------- Fusing loops ---------------------------------
Attempting fusion of parallel loops (combines loops with similar properties)...
Following the attempted fusion of parallel for-loops there are 1 parallel for-
loop(s) (originating from loops labelled: #4).
--------------------------------------------------------------------------------
----------------------------- Before Optimisation ------------------------------
--------------------------------------------------------------------------------
------------------------------ After Optimisation ------------------------------
Parallel structure is already optimal.
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
 
---------------------------Loop invariant code motion---------------------------
Allocation hoisting:
The memory allocation derived from the instruction at 
/Users/georgievaga/Documents/Git/MLE/mle-module-3-gabidb/minitorch/fast_ops.py 
(265) is hoisted out of the parallel loop labelled #4 (it will be performed 
before the loop is executed and reused inside the loop):
   Allocation:: out_index: Index = np.empty(MAX_DIMS, np.int32)
    - numpy.empty() is used for the allocation.
None
MATRIX MULTIPLY
 
================================================================================
 Parallel Accelerator Optimizing:  Function _tensor_matrix_multiply, 
/Users/georgievaga/Documents/Git/MLE/mle-module-3-gabidb/minitorch/fast_ops.py 
(279)  
================================================================================


Parallel loop listing for  Function _tensor_matrix_multiply, /Users/georgievaga/Documents/Git/MLE/mle-module-3-gabidb/minitorch/fast_ops.py (279) 
------------------------------------------------------------------------------------------------|loop #ID
def _tensor_matrix_multiply(                                                                    | 
    out: Storage,                                                                               | 
    out_shape: Shape,                                                                           | 
    out_strides: Strides,                                                                       | 
    a_storage: Storage,                                                                         | 
    a_shape: Shape,                                                                             | 
    a_strides: Strides,                                                                         | 
    b_storage: Storage,                                                                         | 
    b_shape: Shape,                                                                             | 
    b_strides: Strides,                                                                         | 
) -> None:                                                                                      | 
    """                                                                                         | 
    NUMBA tensor matrix multiply function.                                                      | 
                                                                                                | 
    Should work for any tensor shapes that broadcast as long as                                 | 
                                                                                                | 
    ```                                                                                         | 
    assert a_shape[-1] == b_shape[-2]                                                           | 
    ```                                                                                         | 
                                                                                                | 
    Optimizations:                                                                              | 
                                                                                                | 
    * Outer loop in parallel                                                                    | 
    * No index buffers or function calls                                                        | 
    * Inner loop should have no global writes, 1 multiply.                                      | 
                                                                                                | 
                                                                                                | 
    Args:                                                                                       | 
        out (Storage): storage for `out` tensor                                                 | 
        out_shape (Shape): shape for `out` tensor                                               | 
        out_strides (Strides): strides for `out` tensor                                         | 
        a_storage (Storage): storage for `a` tensor                                             | 
        a_shape (Shape): shape for `a` tensor                                                   | 
        a_strides (Strides): strides for `a` tensor                                             | 
        b_storage (Storage): storage for `b` tensor                                             | 
        b_shape (Shape): shape for `b` tensor                                                   | 
        b_strides (Strides): strides for `b` tensor                                             | 
                                                                                                | 
    Returns:                                                                                    | 
        None : Fills in `out`                                                                   | 
    """                                                                                         | 
    assert a_shape[-1] == b_shape[-2]                                                           | 
    a_batch_stride = a_strides[0] if a_shape[0] > 1 else 0                                      | 
    b_batch_stride = b_strides[0] if b_shape[0] > 1 else 0                                      | 
                                                                                                | 
    for batch in prange(out_shape[0]):----------------------------------------------------------| #5
        for i in range(out_shape[1]):                                                           | 
            for j in range(out_shape[2]):                                                       | 
                sum = 0                                                                         | 
                for k in range(a_shape[-1]):                                                    | 
                    a_index = batch * a_batch_stride + i * a_strides[1] + k * a_strides[2]      | 
                    b_index = batch * b_batch_stride + k * b_strides[1] + j * b_strides[2]      | 
                                                                                                | 
                    sum += a_storage[a_index] * b_storage[b_index]                              | 
                                                                                                | 
                out_index = batch * out_strides[0] + i * out_strides[1] + j * out_strides[2]    | 
                out[out_index] = sum                                                            | 
--------------------------------- Fusing loops ---------------------------------
Attempting fusion of parallel loops (combines loops with similar properties)...
Following the attempted fusion of parallel for-loops there are 1 parallel for-
loop(s) (originating from loops labelled: #5).
--------------------------------------------------------------------------------
----------------------------- Before Optimisation ------------------------------
--------------------------------------------------------------------------------
------------------------------ After Optimisation ------------------------------
Parallel structure is already optimal.
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
 
---------------------------Loop invariant code motion---------------------------
Allocation hoisting:
No allocation hoisting found
None